// üé∞ –ê–ª—å—Ñ–∞ –ö–∞–∑–∏–Ω–æ ‚Äî –û–ë–ù–û–í–õ–ï–ù–ù–´–ô SCRIPT –° –•–†–ê–ù–ï–ù–ò–ï–ú –ù–ï–°–ö–û–õ–¨–ö–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô

let currentUser = JSON.parse(localStorage.getItem('casinoCurrentUser')) || null;
let balance = currentUser ? currentUser.balance : 500;
let musicPlaying = false;
let music = document.getElementById('bgMusic');

const symbols = ['üçí','üçã','üçâ','üçá','üíé','üîî','‚≠ê','7Ô∏è‚É£','üçÄ'];
const slots = [
  document.getElementById('slot1'),
  document.getElementById('slot2'),
  document.getElementById('slot3'),
  document.getElementById('slot4'),
  document.getElementById('slot5')
];

window.onload = () => {
  showSplashScreen();
};

function showSplashScreen() {
  const splash = document.getElementById('splashScreen');
  setTimeout(() => {
    splash.style.opacity = '0';
    setTimeout(() => {
      splash.style.display = 'none';
      startupCheck();
    }, 500);
  }, 2500);
}

function startupCheck() {
  updateBalanceDisplay();
  updateUserInfo();
  setupMusicControl();
  startJackpotTimer();
  if (currentUser) {
    document.getElementById('headerButtons').style.display = 'none';
    document.getElementById('authButtons').style.display = 'flex';
  } else if (balance <= 0) {
    openRegistration();
  }
}

function setupMusicControl() {
  document.addEventListener('click', () => {
    if (!musicPlaying) {
      music.play().catch(() => {});
      musicPlaying = true;
    }
  }, { once: true });

  document.getElementById('musicControl').addEventListener('click', () => {
    if (musicPlaying) music.pause(); else music.play().catch(() => {});
    musicPlaying = !musicPlaying;
  });
}

function updateUserInfo() {
  if (currentUser) {
    document.getElementById('user-info').innerText = `–í—ñ—Ç–∞—î–º–æ, ${currentUser.name}!`;
  }
}

function updateBalanceDisplay() {
  document.getElementById('balance').innerText = balance;
  if (currentUser) {
    currentUser.balance = balance;
    localStorage.setItem('casinoCurrentUser', JSON.stringify(currentUser));

    let users = JSON.parse(localStorage.getItem('casinoUsers')) || [];
    users = users.map(u => u.email === currentUser.email ? currentUser : u);
    localStorage.setItem('casinoUsers', JSON.stringify(users));
  } else {
    localStorage.setItem('casinoBalance', balance);
  }
}

function updateBetDisplay() {
  const bet = document.getElementById('betAmount').value;
  document.getElementById('betDisplay').innerText = bet;
}

function startSpin() {
  const bet = parseInt(document.getElementById('betAmount').value);
  if (balance < bet) return alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤!');
  balance -= bet;
  updateBalanceDisplay();
  document.getElementById('spinButton').disabled = true;

  const spinIntervals = [];
  const results = [];

  slots.forEach((slot, i) => {
    let interval = setInterval(() => {
      slot.innerText = symbols[Math.floor(Math.random() * symbols.length)];
    }, 100);
    spinIntervals.push(interval);
  });

  slots.forEach((slot, i) => {
    setTimeout(() => {
      clearInterval(spinIntervals[i]);
      const finalSymbol = symbols[Math.floor(Math.random() * symbols.length)];
      slot.innerText = finalSymbol;
      results[i] = finalSymbol;

      if (i === slots.length - 1) {
        setTimeout(() => {
          checkWin(results, bet);
          document.getElementById('spinButton').disabled = false;
        }, 300);
      }
    }, 1000 + i * 700);
  });
}

function checkWin(results, bet) {
  const win = results.every(symbol => symbol === results[0]);
  if (win) {
    const multiplier = Math.floor(Math.random() * 5 + 5);
    const prize = bet * multiplier;
    balance += prize;
    updateBalanceDisplay();
    celebrateWin(prize);
  }
}

function celebrateWin(amount) {
  const flash = document.createElement('div');
  flash.style.position = 'fixed';
  flash.style.top = '0';
  flash.style.left = '0';
  flash.style.width = '100%';
  flash.style.height = '100%';
  flash.style.backgroundColor = 'gold';
  flash.style.opacity = '0.8';
  flash.style.zIndex = '9999';
  document.body.appendChild(flash);
  setTimeout(() => document.body.removeChild(flash), 500);

  if (navigator.vibrate) navigator.vibrate([300, 200, 300]);

  const crown = document.createElement('div');
  crown.innerText = 'üëë';
  crown.style.position = 'fixed';
  crown.style.top = '20%';
  crown.style.left = '50%';
  crown.style.transform = 'translateX(-50%)';
  crown.style.fontSize = '6em';
  crown.style.zIndex = '10000';
  document.body.appendChild(crown);
  setTimeout(() => document.body.removeChild(crown), 2000);

  const bigWin = document.createElement('div');
  bigWin.innerText = 'BIG WIN!';
  bigWin.style.position = 'fixed';
  bigWin.style.top = '40%';
  bigWin.style.left = '50%';
  bigWin.style.transform = 'translate(-50%, -50%)';
  bigWin.style.fontSize = '4em';
  bigWin.style.color = '#ff0000';
  bigWin.style.fontWeight = 'bold';
  bigWin.style.zIndex = '10001';
  bigWin.style.animation = 'bigwin 1s ease infinite alternate';
  document.body.appendChild(bigWin);
  setTimeout(() => document.body.removeChild(bigWin), 3000);

  alert(`–í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ ${amount} –≥—Ä–Ω!`);
}

function openRegistration() {
  document.getElementById('registrationModal').style.display = 'flex';
}

function openLogin() {
  document.getElementById('loginModal').style.display = 'flex';
}

function completeRegistration() {
  const name = document.getElementById('profileName').value;
  const email = document.getElementById('emailAddress').value;
  const password = document.getElementById('profilePassword').value;
  const wallet = document.getElementById('walletAddress').value;
  if (!name || !email || !password || !wallet) return alert('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!');

  let users = JSON.parse(localStorage.getItem('casinoUsers')) || [];

  if (users.some(u => u.email === email)) {
    return alert('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î!');
  }

  const newUser = { name, email, password, wallet, balance: 600 };
  users.push(newUser);
  localStorage.setItem('casinoUsers', JSON.stringify(users));
  localStorage.setItem('casinoCurrentUser', JSON.stringify(newUser));

  currentUser = newUser;
  balance = 600;

  document.getElementById('headerButtons').style.display = 'none';
  document.getElementById('authButtons').style.display = 'flex';
  updateUserInfo();
  closeModal();
  alert('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å 100 –≥—Ä–Ω.');
  updateBalanceDisplay();
}

function login() {
  const email = document.getElementById('loginEmail').value;
  const password = document.getElementById('loginPassword').value;
  const users = JSON.parse(localStorage.getItem('casinoUsers')) || [];

  const found = users.find(u => u.email === email && u.password === password);

  if (found) {
    currentUser = found;
    balance = found.balance;
    localStorage.setItem('casinoCurrentUser', JSON.stringify(currentUser));
    updateBalanceDisplay();
    document.getElementById('headerButtons').style.display = 'none';
    document.getElementById('authButtons').style.display = 'flex';
    updateUserInfo();
    closeModal();
  } else {
    alert('–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ!');
  }
}

function logout() {
  currentUser = null;
  localStorage.removeItem('casinoCurrentUser');
  balance = 500;
  updateBalanceDisplay();
  document.getElementById('headerButtons').style.display = 'flex';
  document.getElementById('authButtons').style.display = 'none';
  document.getElementById('user-info').innerText = '';
  alert('–í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–∫–∞—É–Ω—Ç–∞.');
}

function openProfile() {
  if (!currentUser) return;
  document.getElementById('profileNameDisplay').innerText = `–ù—ñ–∫–Ω–µ–π–º: ${currentUser.name}`;
  document.getElementById('profileEmailDisplay').innerText = `Email: ${currentUser.email}`;
  document.getElementById('profileWalletDisplay').innerText = `–ì–∞–º–∞–Ω–µ—Ü—å: ${currentUser.wallet}`;
  document.getElementById('profileBalanceDisplay').innerText = `–ë–∞–ª–∞–Ω—Å: ${balance} –≥—Ä–Ω`;
  document.getElementById('profileModal').style.display = 'flex';
}

function recharge() {
  document.getElementById('paymentModal').style.display = 'flex';
}

function confirmRecharge() {
  const usdt = parseFloat(document.getElementById('usdtAmount').value);
  if (!isNaN(usdt) && usdt > 0) {
    const uah = usdt * 39;
    balance += uah;
    updateBalanceDisplay();
    alert(`–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ ${uah} –≥—Ä–Ω`);
    closeModal();
  } else {
    alert('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É');
  }
}

function withdraw() {
  document.getElementById('withdrawModal').style.display = 'flex';
}

function confirmWithdraw() {
  const amount = parseFloat(document.getElementById('withdrawAmount').value);
  const wallet = document.getElementById('withdrawWallet').value;
  if (!wallet || isNaN(amount) || amount <= 0) return alert('–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
  if (amount > balance) return alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ');
  balance -= amount;
  updateBalanceDisplay();
  alert(`–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è ${amount} –≥—Ä–Ω –Ω–∞ ${wallet} –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!`);
  closeModal();
}

function copyWallet() {
  const wallet = document.getElementById('walletAddressText').innerText;
  navigator.clipboard.writeText(wallet).then(() => alert('–ê–¥—Ä–µ—Å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!'));
}

function calculateUAH() {
  const usdt = parseFloat(document.getElementById('usdtAmount').value);
  if (!isNaN(usdt)) {
    document.getElementById('uahResult').innerText = `‚âà ${usdt * 39} –≥—Ä–Ω`;
  } else {
    document.getElementById('uahResult').innerText = '';
  }
}

function closeModal() {
  document.querySelectorAll('.modal').forEach(m => m.style.display = 'none');
}

function startJackpotTimer() {
  let min = 30, sec = 0;
  setInterval(() => {
    if (sec === 0) {
      if (min === 0) {
        min = 30;
        alert('üéâ –î–∂–µ–∫–ø–æ—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!');
      } else {
        min--; sec = 59;
      }
    } else {
      sec--;
    }
    document.getElementById('jackpotTimer').innerText = `–î–∂–µ–∫–ø–æ—Ç —á–µ—Ä–µ–∑: ${min}:${sec < 10 ? '0' : ''}${sec}`;
  }, 1000);
}

function openGame(game) {
  const titles = {
    baccarat: "–ë–∞–∫–∫–∞—Ä–∞",
    blackjack: "–ë–ª—ç–∫–¥–∂–µ–∫",
    craps: "–ö—Ä—ç–ø—Å",
    roulette: "–†—É–ª–µ—Ç–∫–∞",
    poker: "–ü–æ–∫–µ—Ä",
    wheel: "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω–∏"
  };

  document.getElementById('gameTitle').innerText = titles[game] || "–ì—Ä–∞";
  document.getElementById('gameContent').innerHTML = `
    <p><em>${titles[game]} –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.</em></p>
    <p>–ù–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è –≥—Ä–∏ ${titles[game].toUpperCase()} üé≤</p>
  `;
  document.getElementById('gameModal').style.display = 'flex';
}
// =============== –ì–†–ò =============== //

function openGame(game) {
  const modal = document.getElementById('gameModal');
  const titleEl = document.getElementById('gameTitle');
  const contentEl = document.getElementById('gameContent');

  const gameData = {
    baccarat: {
      title: "–ë–∞–∫–∫–∞—Ä–∞",
      html: `
        <p>–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <input type="number" id="baccarat-bet" value="100"> –≥—Ä–Ω</p>
        <button onclick="startBaccarat()">–†–æ–∑–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∏</button>
        <div id="baccarat-result"></div>
      `
    },
    blackjack: {
      title: "–ë–ª—ç–∫–¥–∂–µ–∫",
      html: `
        <p>–í–∞—à—ñ –∫–∞—Ä—Ç–∏: <span id="playerCards"></span></p>
        <p>–°—É–º–∞: <span id="playerSum"></span></p>
        <p>–ö–∞—Ä—Ç–∏ –¥–∏–ª–µ—Ä–∞: <span id="dealerCards"></span></p>
        <p>–°—É–º–∞ –¥–∏–ª–µ—Ä–∞: <span id="dealerSum"></span></p>
        <button onclick="hit()">–í–∑—è—Ç–∏</button>
        <button onclick="stand()">–ó—É–ø–∏–Ω–∏—Ç–∏—Å—å</button>
        <div id="blackjackResult"></div>
      `
    },
    craps: {
      title: "–ö—Ä—ç–ø—Å",
      html: `
        <button onclick="rollCraps()">–ö–∏–Ω—É—Ç–∏ –∫—É–±–∏–∫–∏</button>
        <p>–†–µ–∑—É–ª—å—Ç–∞—Ç: <span id="crapsResult">-</span></p>
      `
    },
    roulette: {
      title: "–†—É–ª–µ—Ç–∫–∞",
      html: `
        <p>–û–±–∏—Ä–∞–π—Ç–µ: <button onclick="spinRoulette('red')">–ß–µ—Ä–≤–æ–Ω–µ</button>
        <button onclick="spinRoulette('black')">–ß–æ—Ä–Ω–µ</button></p>
        <p>–í–∏–ø–∞–ª–æ: <span id="rouletteResult">-</span></p>
      `
    },
    poker: {
      title: "–ü–æ–∫–µ—Ä",
      html: `
        <p>–í–∞—à—ñ –∫–∞—Ä—Ç–∏: <span id="pokerCards"></span></p>
        <button onclick="dealPoker()">–†–æ–∑–¥–∞—Ç–∏</button>
      `
    },
    wheel: {
      title: "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω–∏",
      html: `
        <button onclick="spinWheel()">–û–±–µ—Ä—Ç–∞—Ç–∏ –∫–æ–ª–µ—Å–æ</button>
        <p>–í–∏–ø–∞–ª–æ: <span id="wheelResult">-</span></p>
      `
    }
  };

  const data = gameData[game];
  if (data) {
    titleEl.innerText = data.title;
    contentEl.innerHTML = data.html;
    modal.style.display = 'flex';
    if (game === 'blackjack') initBlackjack();
  }
}

// === –ë–ê–ö–ö–ê–†–ê ===
function startBaccarat() {
  const player = Math.floor(Math.random() * 10 + 1);
  const banker = Math.floor(Math.random() * 10 + 1);
  let result = `–ì—Ä–∞–≤–µ—Ü—å: ${player}, –ë–∞–Ω–∫—ñ—Ä: ${banker} ‚Äî `;
  if (player > banker) result += "–ü–µ—Ä–µ–º–æ–≥–∞ –≥—Ä–∞–≤—Ü—è!";
  else if (banker > player) result += "–ü–µ—Ä–µ–º–æ–≥–∞ –±–∞–Ω–∫—ñ—Ä–∞!";
  else result += "–ù—ñ—á–∏—è!";
  document.getElementById('baccarat-result').innerText = result;
}

// === –ë–õ–≠–ö–î–ñ–ï–ö ===
let blackjackPlayer = [], blackjackDealer = [];
function initBlackjack() {
  blackjackPlayer = [drawCard(), drawCard()];
  blackjackDealer = [drawCard()];
  updateBlackjackDisplay();
}
function drawCard() {
  const ranks = ['2','3','4','5','6','7','8','9','10','J','Q','K','A'];
  const card = ranks[Math.floor(Math.random() * ranks.length)];
  return card;
}
function calculateSum(cards) {
  let sum = 0, aces = 0;
  for (let c of cards) {
    if (['J','Q','K'].includes(c)) sum += 10;
    else if (c === 'A') { sum += 11; aces++; }
    else sum += parseInt(c);
  }
  while (sum > 21 && aces > 0) { sum -= 10; aces--; }
  return sum;
}
function updateBlackjackDisplay() {
  document.getElementById('playerCards').innerText = blackjackPlayer.join(', ');
  document.getElementById('dealerCards').innerText = blackjackDealer.join(', ');
  document.getElementById('playerSum').innerText = calculateSum(blackjackPlayer);
  document.getElementById('dealerSum').innerText = calculateSum(blackjackDealer);
}
function hit() {
  blackjackPlayer.push(drawCard());
  updateBlackjackDisplay();
  if (calculateSum(blackjackPlayer) > 21) {
    document.getElementById('blackjackResult').innerText = "–ü–µ—Ä–µ–±—ñ—Ä! –í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏.";
  }
}
function stand() {
  while (calculateSum(blackjackDealer) < 17) {
    blackjackDealer.push(drawCard());
  }
  updateBlackjackDisplay();
  const playerSum = calculateSum(blackjackPlayer);
  const dealerSum = calculateSum(blackjackDealer);
  let result;
  if (playerSum > 21) result = "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!";
  else if (dealerSum > 21 || playerSum > dealerSum) result = "–í–∏ –≤–∏–≥—Ä–∞–ª–∏!";
  else if (playerSum < dealerSum) result = "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!";
  else result = "–ù—ñ—á–∏—è!";
  document.getElementById('blackjackResult').innerText = result;
}

// === –ö–†–≠–ü–° ===
function rollCraps() {
  const die1 = Math.floor(Math.random()*6)+1;
  const die2 = Math.floor(Math.random()*6)+1;
  const total = die1 + die2;
  let result = `üé≤ ${die1} + ${die2} = ${total} ‚Äî `;
  if ([7,11].includes(total)) result += "–ü–µ—Ä–µ–º–æ–≥–∞!";
  else if ([2,3,12].includes(total)) result += "–ü—Ä–æ–≥—Ä–∞—à!";
  else result += "–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É.";
  document.getElementById('crapsResult').innerText = result;
}

// === –†–£–õ–ï–¢–ö–ê ===
function spinRoulette(choice) {
  const num = Math.floor(Math.random()*36)+1;
  const color = (num % 2 === 0) ? 'black' : 'red';
  const win = (choice === color);
  document.getElementById('rouletteResult').innerText = `${num} (${color}) ‚Äî ${win ? '–í–∏ –≤–∏–≥—Ä–∞–ª–∏!' : '–ü—Ä–æ–≥—Ä–∞—à'}`;
}

// === –ü–û–ö–ï–† ===
function dealPoker() {
  const suits = ['‚ô†','‚ô•','‚ô¶','‚ô£'];
  const ranks = ['2','3','4','5','6','7','8','9','10','J','Q','K','A'];
  let hand = [];
  while (hand.length < 5) {
    const card = ranks[Math.floor(Math.random()*ranks.length)] + suits[Math.floor(Math.random()*suits.length)];
    if (!hand.includes(card)) hand.push(card);
  }
  document.getElementById('pokerCards').innerText = hand.join(', ');
}

// === –ö–û–õ–ï–°–û –§–û–†–¢–£–ù–ò ===
function spinWheel() {
  const sectors = ['100', '200', '0', 'x2', '500', '0', 'x3', '1000'];
  const result = sectors[Math.floor(Math.random()*sectors.length)];
  document.getElementById('wheelResult').innerText = `–í–∏ –≤–∏–≥—Ä–∞–ª–∏: ${result}`;
}
